Tickets:

Ticket #1: Implement Queue System for Discord Bot

Objective: Implement a queue system for managing YouTube audio playback in the Discord bot.

Description:
The Discord bot should manage a dynamic queue system that handles YouTube audio tracks. This involves storing track details and handling queue operations through .json files.

Tasks:

    Data Structure Design:
        Design a data structure for the queue to store the following information for each entry:
            video_url: URL of the YouTube video
            title: Title of the video
            is_playlist: Boolean indicating if the video is from a playlist
            playlist_index: Index of the video in the playlist, if applicable
            Additional placeholders for future metadata (e.g., duration, uploader)

    Queue Storage:
        Implement functionality to write the current state of the queue to a .json file at regular intervals and upon significant changes (e.g., adding or removing an item).
        Ensure that each queue is named based on the current date for uniqueness and is stored in a way that multiple queues can be managed and accessed historically.

    Queue Management:
        Develop methods to load and manage multiple queues based on their names and creation dates, allowing for retrieval and manipulation of specific queues as required by the user commands.

Expected Behaviors:

    Error Handling: If the bot encounters an unsupported URL or an unavailable video during the queue operations:
        Log the error with a specific message indicating the nature of the issue (e.g., "Video not available" or "URL format not recognized").
        Display a user-friendly message in the Discord chat to inform about the issue.
    Queue Limits: There is no set maximum number of entries in a queue at this time. The system should be capable of handling dynamically sized queues, but performance implications of extremely large queues should be monitored.

Questions Answered:

    Maximum Queue Entries: No maximum limit. System should scale as needed but monitor for performance issues.
    Exception Handling: Detailed logging and user notifications for unsupported URLs or unavailable videos are required.



                    Ticket for ChatGPT #1:
                    Ticket #1: Implement Queue System for Discord Bot

                        Objective: Create a dynamic queue system for handling YouTube audio playback in a Discord bot, using Python and JSON for data storage.
                        Simplified Task Breakdown:

                            Data Structure Design:
                                Task: Create a Python class or a dictionary structure to represent a queue entry.
                                    Attributes:
                                        video_url: Store the URL of the YouTube video.
                                        title: Store the video's title.
                                        is_playlist: Boolean to indicate if the video is from a playlist.
                                        playlist_index: Store the index if the video is part of a playlist.
                                        Add placeholders for additional attributes like duration and uploader.

                            Queue Storage:
                                Task: Write functions to save and load the queue state as a JSON file.
                                    Save Function: Convert the queue (list of entries) to JSON and save to a file. Trigger this on queue update events.
                                    File Naming: Use the current date to name the JSON file (e.g., queue_YYYY-MM-DD.json).
                                    Load Function: Read a JSON file and convert it back to the queue data structure.

                            Queue Management:
                                Task: Implement functions to manage multiple queue files by date and name.
                                    Load Specific Queue: Write a function to fetch a queue by its name (date).
                                    Queue Manipulation: Ensure functions exist to add, remove, and update entries in the queue.

                        Expected Behaviors:

                            Error Handling:
                                Log Errors: Implement logging for errors related to unsupported URLs or video availability issues.
                                User Feedback: Create a function to send messages back to the Discord channel explaining any issues that arise during queue operations.

                            Queue Scalability:
                                Performance Monitoring: Set up basic logging to monitor how the queue performs as it grows in size.

                        Implementation Guide for Each Task:

                            Data Structure Implementation:
                                Define a Python class with the necessary properties.
                                Implement methods for basic interactions like setting attributes and representing the object as a string.

                            Queue Storage Implementation:
                                Use Pythonâ€™s json library to serialize and deserialize the queue data structure.
                                Handle file operations (open, write, read, close) with proper error checks.

                            Queue Management Implementation:
                                Develop utility functions for queue manipulation, ensuring they are robust and handle edge cases (e.g., trying to load a non-existent queue).






Ticket #2: Develop Basic Playback Commands

Objective: Implement basic playback control commands (play, pause, resume, stop) for the Discord bot.

Description:
The bot needs to control YouTube audio playback directly through Discord chat commands, utilizing yt-dlp for extracting audio and ffmpeg for handling streaming.

Tasks:

    Play Command:
        Develop the play command to:
            Use yt-dlp to extract audio data from provided YouTube URLs.
            Add the extracted audio to the playback queue.
            Initiate playback of the audio if not already playing.
        Handle adding to the queue and starting playback seamlessly.

    Pause, Resume, and Stop Commands:
        Implement the pause command to pause current audio playback without leaving the audio stream.
        Implement the resume command to continue playback from the point it was paused.
        Implement the stop command to completely halt the current audio playback and clear the playback buffer.

Expected Behaviors:

    Concurrency Handling:
        When multiple command requests are received simultaneously, log all requests.
        Process each command sequentially, disregarding the order of arrival. Ensure that the state of playback (e.g., whether currently playing, paused, or stopped) is accurately maintained across commands.
    Permissions:
        No specific user permissions are required for sending playback commands. Any user who can send messages in the channel should be able to issue these commands.

Questions Answered:

    Handling Simultaneous Commands: The bot will log all received commands and process them sequentially in an unspecified order. This ensures that all commands are addressed without prioritizing based on the order of arrival.
    User Permissions: All users with message-sending capabilities in the Discord channel can interact with the playback commands, emphasizing ease of use and accessibility.

                        Ticket #2:
                        Ticket #2: Develop Basic Playback Commands

                        Objective: Create and manage basic playback controls (play, pause, resume, stop) for a Discord bot that uses YouTube audio streams.
                        Simplified Task Breakdown:

                            Play Command:
                                Task: Develop a function to handle the play command which processes YouTube URLs to play audio.
                                    Extract Audio: Use yt-dlp to download or extract audio streams from YouTube URLs.
                                    Queue Integration: Add the extracted audio details to the playback queue.
                                    Start Playback: If no other audio is playing, start playback of the newly added audio.
                                    Seamless Transition: Ensure smooth transition between commands without interrupting ongoing streams unless necessary.

                            Pause, Resume, and Stop Commands:
                                Pause Command: Implement a function to pause the currently playing audio without disconnecting from the stream.
                                Resume Command: Develop a function to resume paused audio from the last known position.
                                Stop Command: Create a function to stop the audio completely and reset the playback environment (e.g., clear buffers).

                        Expected Behaviors:

                            Concurrency Handling:
                                Log Requests: Implement logging for every command received to maintain a record of user interactions.
                                Sequential Processing: Handle commands in the order they are processed by the system, ensuring consistent playback state.
                            Permissions Handling:
                                Open Access: Allow any user in the Discord channel to use these commands, facilitating broad usability and interaction.

                        Implementation Guide for Each Task:

                            Implementing the Play Command:
                                Use the yt-dlp library to fetch audio streams from given YouTube URLs.
                                Store these streams or their identifiers in a queue system.
                                Initiate or control playback using a library compatible with Discordâ€™s audio protocols (likely involving ffmpeg).

                            Handling Pause, Resume, and Stop Commands:
                                Utilize Discordâ€™s API or the appropriate libraries to manipulate the playback state.
                                Ensure that these commands affect only the current stream or session, maintaining isolation between different user sessions or commands.






Ticket #3: Navigation Commands

Objective: Implement navigation commands (skip, previous, list-queue, clear-queue, shuffle) for managing the playback queue in the Discord bot.

Description:
To enhance user interaction with the queue, implement commands that allow users to navigate through and manage the playback queue directly through Discord.

Tasks:

    Skip and Previous Commands:
        Develop the skip command to move playback to the next item in the queue, stopping the current track if one is playing.
        Develop the previous command to revert playback to the previous track in the queue, considering the sequential order based on the current playing track's index.

    List-Queue Command:
        Implement the list-queue command to display all entries in the current queue, showing:
            Index of each entry in the current queue.
            Video title.
            Whether the entry is from a playlist.
            The original index of the entry if it is from a playlist.

    Clear-Queue Command:
        Develop the clear-queue command to remove all entries from the current day's queue, effectively resetting the playback list for fresh use.

    Shuffle Command:
        Implement the shuffle command to randomly reorder the entries in the queue. Ensure that the internal playlist indices remain unchanged to preserve the original order of tracks within their respective playlists.

Expected Behaviors:

    Queue Navigation: Ensure that the skip and previous commands respect the current state of the queue, allowing for intuitive navigation.
    Queue Visibility: The list-queue command should provide comprehensive visibility into the queueâ€™s current state, aiding users in making informed choices about which commands to issue next.
    Queue Management: The clear-queue and shuffle commands should modify the queue in a predictable manner, maintaining a user-friendly experience.

Questions Answered:

    List-Queue Command Details: The command will list the index, video title, playlist status, and original playlist index for each entry, providing a detailed overview of the queue contents for users.






Ticket #4: Advanced Queue Management

Objective: Implement advanced queue management features (get-queue) for the Discord bot.

Description:
To enhance the functionality of the Discord bot, implement a command that allows users to load and play audio from a specific queue identified by its name. This feature enables users to manage multiple queues effectively and initiate playback from any stored queue.

Tasks:

    Get-Queue Command:
        Implement the get-queue:<queue-name> command that allows users to specify a queue by its unique name.
        Retrieve and load the specified queue, initiating playback from the first entry if the queue exists.
        Handle cases where the queue might not exist or is empty by providing appropriate user feedback.

Expected Behaviors:

    Error Handling: If the specified queue does not exist or is empty:
        Respond with a clear error message "Queue does not exist" if the queue name provided does not match any stored queues.
    Successful Load Feedback:
        When a queue is successfully loaded, send a message in the following format:
            "<name-of-queue> Queue Loaded - <number-of-entries-in-queue>\nStarted Playing: <video-title>"
            This message should provide users with confirmation that the queue is active and also indicate the first track being played.

Questions Answered:

    Handling Non-Existent Queues: The bot will respond with "Queue does not exist" if no corresponding queue file is found for the given name, providing immediate and clear feedback to the user.
    Feedback for Queue Loading: On successful queue loading, the bot will inform the user of the successful action and provide details about the queue and the first video playing to enhance user experience and interaction.